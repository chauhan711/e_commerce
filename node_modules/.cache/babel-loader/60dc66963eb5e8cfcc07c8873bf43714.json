{"ast":null,"code":"var _jsxFileName = \"/var/www/html/dummy_applications/3rd_party_login/src/components/paypal/payment.payal.js\";\nimport React from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nconst initialOptions = {\n  clientId: \"AXzXikAFC3jt6oOOE6VqajfrUF3wX-gVcd7DA4wan26noU8uG2cVeElNa60kcWR-PJUgIIZ__LG0W3Y7\",\n  currency: \"USD\",\n  intent: \"capture\"\n};\nfunction createOrder() {\n  axios.get(`${process.env.REACT_APP_USER_BASE_URL}/get-user-products`, {\n    headers: header\n  }).then(response => {\n    setUserproducts(response.data.products);\n    setTotalAmt(response.data.totalAmt);\n    setQuantity(response.data.quantity);\n  }).catch(err => {\n    console.log(err);\n  });\n  return fetch(\"/my-server/create-paypal-order\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    // use the \"body\" param to optionally pass additional order information\n    // like product ids and quantities\n    body: JSON.stringify({\n      cart: [{\n        id: \"YOUR_PRODUCT_ID\",\n        quantity: \"YOUR_PRODUCT_QUANTITY\"\n      }]\n    })\n  }).then(response => response.json()).then(order => order.id);\n}\nconst Payment = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PayPalScriptProvider, {\n    options: initialOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PayPalButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  })));\n};\nexport default Payment;","map":{"version":3,"names":["React","PayPalScriptProvider","PayPalButtons","initialOptions","clientId","currency","intent","createOrder","axios","get","process","env","REACT_APP_USER_BASE_URL","headers","header","then","response","setUserproducts","data","products","setTotalAmt","totalAmt","setQuantity","quantity","catch","err","console","log","fetch","method","body","JSON","stringify","cart","id","json","order","Payment","createElement","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","options"],"sources":["/var/www/html/dummy_applications/3rd_party_login/src/components/paypal/payment.payal.js"],"sourcesContent":["import React from 'react';\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nconst initialOptions = {\n    clientId: \"AXzXikAFC3jt6oOOE6VqajfrUF3wX-gVcd7DA4wan26noU8uG2cVeElNa60kcWR-PJUgIIZ__LG0W3Y7\",\n    currency: \"USD\",\n    intent: \"capture\",\n};\nfunction createOrder() {\n    axios.get(`${process.env.REACT_APP_USER_BASE_URL}/get-user-products`,{headers :header})\n        .then((response)=>{\n            setUserproducts(response.data.products);\n            setTotalAmt(response.data.totalAmt);\n            setQuantity(response.data.quantity);\n        }).catch((err)=>{\n            console.log(err);\n        });\n    return fetch(\"/my-server/create-paypal-order\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        // use the \"body\" param to optionally pass additional order information\n        // like product ids and quantities\n        body: JSON.stringify({\n            cart: [\n                {\n                    id: \"YOUR_PRODUCT_ID\",\n                    quantity: \"YOUR_PRODUCT_QUANTITY\",\n                },\n            ],\n        }),\n    })\n        .then((response) => response.json())\n        .then((order) => order.id);\n}\nconst Payment = () =>  {\n    return (\n        <div key={1}>\n            <PayPalScriptProvider options={initialOptions}>\n                <PayPalButtons />\n            </PayPalScriptProvider>\n        </div>\n    );\n}\n\n  export default Payment;\n  "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,EAAEC,aAAa,QAAQ,yBAAyB;AAC7E,MAAMC,cAAc,GAAG;EACnBC,QAAQ,EAAE,kFAAkF;EAC5FC,QAAQ,EAAE,KAAK;EACfC,MAAM,EAAE;AACZ,CAAC;AACD,SAASC,WAAWA,CAAA,EAAG;EACnBC,KAAK,CAACC,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB,oBAAoB,EAAC;IAACC,OAAO,EAAEC;EAAM,CAAC,CAAC,CAClFC,IAAI,CAAEC,QAAQ,IAAG;IACdC,eAAe,CAACD,QAAQ,CAACE,IAAI,CAACC,QAAQ,CAAC;IACvCC,WAAW,CAACJ,QAAQ,CAACE,IAAI,CAACG,QAAQ,CAAC;IACnCC,WAAW,CAACN,QAAQ,CAACE,IAAI,CAACK,QAAQ,CAAC;EACvC,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAG;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB,CAAC,CAAC;EACN,OAAOG,KAAK,CAAC,gCAAgC,EAAE;IAC3CC,MAAM,EAAE,MAAM;IACdhB,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACD;IACA;IACAiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,IAAI,EAAE,CACF;QACIC,EAAE,EAAE,iBAAiB;QACrBX,QAAQ,EAAE;MACd,CAAC;IAET,CAAC;EACL,CAAC,CAAC,CACGR,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACmB,IAAI,CAAC,CAAC,CAAC,CACnCpB,IAAI,CAAEqB,KAAK,IAAKA,KAAK,CAACF,EAAE,CAAC;AAClC;AACA,MAAMG,OAAO,GAAGA,CAAA,KAAO;EACnB,oBACIrC,KAAA,CAAAsC,aAAA;IAAKC,GAAG,EAAE,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACR7C,KAAA,CAAAsC,aAAA,CAACrC,oBAAoB;IAAC6C,OAAO,EAAE3C,cAAe;IAAAqC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1C7C,KAAA,CAAAsC,aAAA,CAACpC,aAAa;IAAAsC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACE,CACrB,CAAC;AAEd,CAAC;AAEC,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}